import Cookies from "js-cookie";
import {AUTO_SCREENSHOT_FLAG, DOM_ELEMENTS_PREFIX} from "../utils/const";
import {dragElement} from "../utils/drag";
import {getScreenShot} from "../utils/screenshot";
import {getActiveFrame} from "../utils/getActiveFrame";
import {getEnvironment, getErrorMessage} from "../utils/environment";
import {getVersionFromActuator} from "../utils/getActuator";

export class ButtonWidget {
    constructor(x = '40px', y = '5px') {
        console.log('call constructor');
        // –ø–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
        let button_div = document.createElement("span");
        button_div.style.top = Cookies.get(DOM_ELEMENTS_PREFIX + '_x') || x;
        button_div.style.left = Cookies.get(DOM_ELEMENTS_PREFIX + '_y') || y;
        button_div.setAttribute("id", DOM_ELEMENTS_PREFIX + "submit_error_button");
        button_div.innerHTML = "&#8227; –û—à–∏–±–∫–∞ <span>–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Jira</span>";
        // –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞, –ø–æ–∫–∞ –Ω–µ–≤–∏–¥–∏–º–æ–µ
        let textarea_div = document.createElement("span");
        textarea_div.setAttribute("id", DOM_ELEMENTS_PREFIX + "error_message");
        textarea_div.style.visibility = "hidden";
        textarea_div.style.top = Cookies.get(DOM_ELEMENTS_PREFIX + '_x') || x;
        textarea_div.style.left = Cookies.get(DOM_ELEMENTS_PREFIX + '_y') || y;
        let text_area = document.createElement("textarea");
        text_area.placeholder = `–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É${AUTO_SCREENSHOT_FLAG ? ', –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã' : ''}`;
        text_area.setAttribute("id", DOM_ELEMENTS_PREFIX + "error_description");
        text_area.required = true;
        text_area.name = "description";

        // –∫–Ω–æ–ø–∫–∏ –°–æ–∑–¥–∞—Ç—å –û—Ç–º–µ–Ω–∞ –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å
        let buttons_container = document.createElement("div");
        buttons_container.setAttribute("id", DOM_ELEMENTS_PREFIX + "buttons_container");
        let submit_button = document.createElement("button");
        submit_button.appendChild(document.createTextNode("–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"));
        let cancel_button = document.createElement("button");
        cancel_button.appendChild(document.createTextNode("–û—Ç–º–µ–Ω–∞"));
        let paint_button = document.createElement("button");
        paint_button.setAttribute('title', '–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ');
        paint_button.appendChild(document.createTextNode("üé®"));
        textarea_div.appendChild(text_area);
        buttons_container.appendChild(submit_button);
        buttons_container.appendChild(cancel_button);
        buttons_container.appendChild(paint_button);
        textarea_div.appendChild(buttons_container);

        let result_area = document.createElement("div");
        result_area.setAttribute("id", DOM_ELEMENTS_PREFIX + "result");
        result_area.style.visibility = "hidden";
        // –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        paint_button.onclick = async () => {
            button_div.style.visibility = "hidden";
            textarea_div.style.visibility = "hidden";
            // –¥–ª—è intranet –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω –∞–∫—Ç–∏–≤–Ω–æ–≥–æ iframe –∏–ª–∏ –æ–∫–Ω–∞
            let activeFrame = getActiveFrame();
            // —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            let screenShotMain = await getScreenShot(document.body);
            // —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è jepria –∏ gwt
            let screenShotFrame = await getScreenShot(activeFrame.document.body);
            // canvas –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å
            let canvas = document.createElement("canvas");
            canvas.setAttribute("id", DOM_ELEMENTS_PREFIX + "paint_canvas");
            canvas.setAttribute('style', "background: #000; padding: 0;margin: 0 auto; cursor:crosshair; position:absolute; left:0; top:0; border: 2px dashed yellow;");
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            let end_paint_button = document.createElement('button');
            end_paint_button.appendChild(document.createTextNode("–ì–æ—Ç–æ–≤–æ üé®"));
            end_paint_button.setAttribute('title', '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ');
            // —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞—Ç—å –†–∏—Å–æ–≤–∞–Ω–∏–µ, –Ω—É–∂–Ω—ã —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–º –∂–µ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            let rect = paint_button.getBoundingClientRect();
            end_paint_button.setAttribute('style', `left:${rect.left}px;top:${rect.top}px;position:fixed;`);
            // –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
            end_paint_button.onclick = async () => {
                console.log('painting end');
                this._screenshot = canvas.toDataURL("image/png");
                button_div.style.visibility = "visible";
                textarea_div.style.visibility = "visible";
                document.body.removeChild(canvas);
                document.body.removeChild(end_paint_button);
            }
            document.body.appendChild(canvas);
            document.body.appendChild(end_paint_button);
            let destCtx = canvas.getContext('2d');
            let screen_main_image = new Image;
            screen_main_image.onload = function () {
                // —Ä–∏—Å—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ –Ω–∞—à canvas —Å–∫—Ä–∏–Ω—à–æ—Ç - –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
                destCtx.drawImage(screen_main_image, 0, 0);
            };
            screen_main_image.src = screenShotMain;
            if (document.body !== activeFrame.document.body) {
                let screen_frame_image = new Image;
                screen_frame_image.onload = function () {
                    let frame_rect =  activeFrame.document.body.getBoundingClientRect();
                    // —Ä–∏—Å—É–µ–º –≤ –Ω–∞—à canvas —Å–∫—Ä–∏–Ω—à–æ—Ç - iframe
                    destCtx.drawImage(screen_frame_image, window.innerWidth - frame_rect.width - 16, window.innerHeight - frame_rect.height - 16);
                };
                screen_frame_image.src = screenShotFrame;
            }
            // –ø–µ—Ä–æ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∫—Ä–∏–Ω–µ
            destCtx.lineCap = 'round';
            destCtx.lineWidth = 8;
            destCtx.strokeStyle = "rgba(255,255,0, 0.5)";
            let prevX = 0;
            let prevY = 0;
            // —Ä–∏—Å—É–µ–º –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
            canvas.onmousemove = (e) => {
                let x = e.offsetX;
                let y = e.offsetY;
                // explorer –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç movementX movementY - —ç–º—É–ª–∏—Ä—É–µ–º
                let movementX = (prevX ? e.screenX - prevX : 0)
                let movementY = (prevY ? e.screenY - prevY : 0)
                prevX = e.screenX;
                prevY = e.screenY;

                let dx = e.movementX || movementX;
                let dy = e.movementY || movementY;
                //–µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏, —Ä–∏—Å—É–µ–º
                if (e.buttons > 0) {
                    destCtx.beginPath();
                    destCtx.moveTo(x, y);
                    destCtx.lineTo(x - dx, y - dy);
                    destCtx.stroke();
                    destCtx.closePath();
                }
            };
        }
        // –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        cancel_button.onclick = () => {
            textarea_div.style.visibility = "hidden";
            text_area.value = "";
        };
        button_div.onclick = () => {
            textarea_div.style.visibility = "visible";
        };
        // –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        submit_button.onclick = async () => {
            button_div.style.visibility = "hidden";
            textarea_div.style.visibility = "hidden";
            let activeFrame = getActiveFrame();
            // –∏–ª–∏ —Å–∫—Ä–∏–Ω–∞ —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ –∏–ª–∏ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω –æ–∫–Ω–∞
            this._screenshot ||= await getScreenShot(activeFrame.document.body);
            this._url = activeFrame.url;
            this._serverEnvironment = await getVersionFromActuator(activeFrame.url);
            // —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è JepRia –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            this._clientErrorMessage = getErrorMessage(activeFrame.document);
            // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            this.handleSend().then(result => {
                console.log('get result', result);
                result_area.style.visibility = "visible";
                if (result && result.link) {
                    result_area.appendChild(document.createTextNode("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ "));
                    let a = document.createElement('a');
                    a.href = result.link;
                    a.target = "_blank";
                    a.title = "–ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–µ";
                    a.appendChild(document.createTextNode("–ø–æ —Å—Å—ã–ª–∫–µ"));
                    result_area.appendChild(a);
                } else {
                    result_area.appendChild(document.createTextNode("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏"));
                }
                let close = document.createElement('span');
                close.title = "–ó–∞–∫—Ä—ã—Ç—å";
                close.className = 'close';
                close.onclick = () => {
                    result_area.style.visibility = "hidden";
                };
                result_area.setAttribute("id", DOM_ELEMENTS_PREFIX + "result");
                result_area.appendChild(close);
            });
        };
        this._result = result_area;
        this._button = button_div;
        this._children = textarea_div;
    }

    render() {
        document.body.appendChild(this._button);
        document.body.appendChild(this._children);
        document.body.appendChild(this._result);
        dragElement(this._button, this._children);
        console.log('call render');
    }

    screenshot() {
        console.log('get edited screenshot');
        return this._screenshot;
    }

    url() {
        console.log('get iframe url');
        return this._url;
    }

    serverEnvironment() {
        console.log('get server environment');
        return this._serverEnvironment;
    }

    clientEnvironment() {
        console.log('get client environment');
        return getEnvironment();
    }

    clientErrorMessage() {
        console.log('get gwt client error');
        return this._clientErrorMessage;
    }
}