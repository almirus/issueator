import Cookies from "js-cookie";
import {AUTO_SCREENSHOT_FLAG, DOM_ELEMENTS_PREFIX} from "../utils/const";
import {dragElement} from "../utils/drag";
import {getScreenShot} from "../utils/screenshot";

export class ButtonWidget {
    constructor(x = '40px', y = '5px') {
        console.log('call constructor');
        let button_div = document.createElement("span");
        button_div.style.top = Cookies.get(DOM_ELEMENTS_PREFIX + '_x') || x;
        button_div.style.left = Cookies.get(DOM_ELEMENTS_PREFIX + '_y') || y;
        button_div.setAttribute("id", DOM_ELEMENTS_PREFIX + "submit_error_button");
        button_div.innerHTML = "&#8227; –û—à–∏–±–∫–∞ <span>–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Jira</span>";
        let textarea_div = document.createElement("span");
        textarea_div.setAttribute("id", DOM_ELEMENTS_PREFIX + "error_message");
        textarea_div.style.visibility = "hidden";

        textarea_div.style.top = Cookies.get(DOM_ELEMENTS_PREFIX + '_x') || x;
        textarea_div.style.left = Cookies.get(DOM_ELEMENTS_PREFIX + '_y') || y;

        let text_area = document.createElement("textarea");
        text_area.placeholder = `–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É${AUTO_SCREENSHOT_FLAG ? ', –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã' : ''}`;
        text_area.setAttribute("id", DOM_ELEMENTS_PREFIX + "error_description");
        text_area.required = true;
        text_area.name = "description";
        let submit_button = document.createElement("button");
        submit_button.appendChild(document.createTextNode("–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"));
        let cancel_button = document.createElement("button");
        cancel_button.appendChild(document.createTextNode("–û—Ç–º–µ–Ω–∞"));
        let paint_button = document.createElement("button");
        paint_button.setAttribute('title', '–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ');
        paint_button.appendChild(document.createTextNode("üé®"));
        textarea_div.appendChild(text_area);
        textarea_div.appendChild(document.createElement("br"));
        textarea_div.appendChild(submit_button);
        textarea_div.appendChild(cancel_button);
        textarea_div.appendChild(paint_button);
        let result_area = document.createElement("div");
        result_area.setAttribute("id", DOM_ELEMENTS_PREFIX + "result");
        result_area.style.visibility = "hidden";


        paint_button.onclick = async () => {
            button_div.style.visibility = "hidden";
            textarea_div.style.visibility = "hidden";
            let screenShot = await getScreenShot();
            // canvas –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–∏–º —Ä–∏—Å–æ–≤–∞—Ç—å
            let canvas = document.createElement("canvas");
            canvas.setAttribute("id", DOM_ELEMENTS_PREFIX + "paint_canvas");
            canvas.setAttribute('style', "background: #000; padding: 0;margin: 0 auto; cursor:crosshair; position:absolute; left:0; top:0;");
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            let end_paint_button = document.createElement('button');
            end_paint_button.appendChild(document.createTextNode("–ì–æ—Ç–æ–≤–æ"));
            end_paint_button.setAttribute('title', '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ');
            end_paint_button.setAttribute('style', 'left:0;top:0;position:fixed;');
            end_paint_button.onclick = () => {
                console.log('painting end');
                this._screenshot = screen_canvas;
                button_div.style.visibility = "visible";
                textarea_div.style.visibility = "visible";
                document.body.removeChild(canvas);
                document.body.removeChild(end_paint_button);
            }
            document.body.appendChild(canvas);
            document.body.appendChild(end_paint_button);
            let destCtx = canvas.getContext('2d');
            let screen_canvas = new Image;
            screen_canvas.onload = function () {
                // —Ä–∏—Å—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ –Ω–∞—à canvas —Å–∫—Ä–∏–Ω—à–æ—Ç
                destCtx.drawImage(screen_canvas, 0, 0);
            };
            screen_canvas.src = screenShot;
            destCtx.lineCap = 'round';
            destCtx.lineWidth = 8;
            destCtx.strokeStyle = "rgba(255,255,0, 0.5)";
            let prevX = 0;
            let prevY = 0;
            canvas.onmousemove = (e) => {
                let x = e.offsetX;
                let y = e.offsetY;
                // explorer –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç movementX movementY - —ç–º—É–ª–∏—Ä—É–µ–º
                let movementX = (prevX ? e.screenX - prevX : 0)
                let movementY = (prevY ? e.screenY - prevY : 0)
                prevX = e.screenX;
                prevY = e.screenY;

                let dx = e.movementX|| movementX;
                let dy = e.movementY || movementY;
                //–µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏, —Ä–∏—Å—É–µ–º
                if (e.buttons > 0) {
                    destCtx.beginPath();
                    destCtx.moveTo(x, y);
                    destCtx.lineTo(x - dx, y - dy);
                    destCtx.stroke();
                    destCtx.closePath();

                }
            };
        }
        cancel_button.onclick = () => {
            textarea_div.style.visibility = "hidden";
            text_area.value = "";
        };
        button_div.onclick = () => {
            textarea_div.style.visibility = "visible";
        };
        submit_button.onclick = async () => {
            button_div.style.visibility = "hidden";
            textarea_div.style.visibility = "hidden";
            // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            this.handleSend().then(result => {
                console.log('get result', result);
                result_area.style.visibility = "visible";
                if (result && result.link) {
                    result_area.appendChild(document.createTextNode("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ "));
                    let a = document.createElement('a');
                    a.href = result.link;
                    a.target = "_blank";
                    a.title = "–ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–µ";
                    a.appendChild(document.createTextNode("–ø–æ —Å—Å—ã–ª–∫–µ"));
                    result_area.appendChild(a);
                } else {
                    result_area.appendChild(document.createTextNode("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏"));
                }
                let close = document.createElement('span');
                close.title = "–ó–∞–∫—Ä—ã—Ç—å";
                close.className = 'close';
                close.onclick = () => {
                    result_area.style.visibility = "hidden";
                };
                result_area.setAttribute("id", DOM_ELEMENTS_PREFIX + "result");
                result_area.appendChild(close);
            });
        };
        this._result = result_area;
        this._button = button_div;
        this._children = textarea_div;
    }

    render() {
        document.body.appendChild(this._button);
        document.body.appendChild(this._children);
        document.body.appendChild(this._result);
        dragElement(this._button, this._children);
        console.log('call render');
    }

    screenshot() {
        console.log('get edited screenshot');
        return this._screenshot;
    }
}